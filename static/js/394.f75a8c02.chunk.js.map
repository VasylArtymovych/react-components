{"version":3,"file":"static/js/394.f75a8c02.chunk.js","mappings":"4OAAe,SAASA,EAAT,GAAqD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACrD,OACE,mBACEC,KAAK,OACLF,MAAOA,EACPC,SAAU,SAAAE,GACRF,EAASE,EAAEC,OAAOJ,QAJtB,SAOGD,EAAQM,KAAI,SAAAC,GAAM,OACjB,mBAA2BN,MAAOM,EAAON,MAAzC,SACGM,EAAOC,OADGD,EAAON,YCVb,SAASQ,EAAT,GAA2B,IAAVC,EAAS,EAATA,MAC9B,OACE,8BACE,4BACE,2BACE,gCACA,wCAGJ,2BACGA,EAAMJ,KAAI,gBAAGK,EAAH,EAAGA,GAAIV,EAAP,EAAOA,MAAP,OACT,2BACE,wBAAKU,KACL,wBAAKV,MAFEU,WCNnB,IAAMC,EAAe,CACnB,CAAED,GAAI,EAAGV,MAAO,KAChB,CAAEU,GAAI,EAAGV,MAAO,KAChB,CAAEU,GAAI,EAAGV,MAAO,KAChB,CAAEU,GAAI,EAAGV,MAAO,KAChB,CAAEU,GAAI,EAAGV,MAAO,MAGZY,EAAc,CAClB,CAAEZ,MAAO,YAAaO,MAAO,gBAC7B,CAAEP,MAAO,aAAcO,MAAO,kBAGjB,SAASM,IAAa,IAAD,EAClC,GAAgCC,EAAAA,EAAAA,UAASH,GAAzC,eAAOI,EAAP,KAAiBC,EAAjB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAQMC,GARN,KAQe,WALAC,EAAAA,EAAAA,UACb,kBAAMC,OAAOC,aAAP,OAAuBJ,MAC7B,CAACA,IAGsBK,cAAV,QAAoB,aA4BnC,OAfAC,EAAAA,EAAAA,YAAU,WACgB,KAApBT,EAASU,QACbZ,GAAS,kBAAKE,GAAN,IAAgBU,OAAQ,wBAC/B,CAACV,EAAUF,KAEdW,EAAAA,EAAAA,YAAU,WACRZ,GAAY,SAAAc,GAAK,OACf,OAAIA,GAAOC,MAAK,SAACC,EAAGC,GAClB,MAAqB,cAAdV,EACHS,EAAEhC,MAAQiC,EAAEjC,MACZiC,EAAEjC,MAAQgC,EAAEhC,cAGnB,CAACuB,KAGF,iCACE,SAACzB,EAAD,CACEC,QAASa,EACTZ,MAAOuB,EACPtB,SAxBqB,SAAAD,GACzBiB,GAAS,kBAAKE,GAAN,IAAgBU,OAAO,UAAD,OAAY7B,UAyBxC,SAACQ,EAAD,CAAOC,MAAOM,S,+EC7DL,SAASmB,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,EAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOH,MAAMM,KAAKH,GFInF,CAAgBJ,KAAQ,EAAAQ,EAAA,GAA2BR,IGLvE,WACb,MAAM,IAAIS,UAAU,wIHIwE","sources":["components/SortSelector/SortSelector.jsx","components/Table/Table.jsx","pages/TablePage.jsx","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["export default function SortSelector({ options, value, onChange }) {\n  return (\n    <select\n      name=\"sort\"\n      value={value}\n      onChange={e => {\n        onChange(e.target.value);\n      }}\n    >\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label}\n        </option>\n      ))}\n    </select>\n  );\n}\n","export default function Table({ items }) {\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>ID</th>\n          <th>Value</th>\n        </tr>\n      </thead>\n      <tbody>\n        {items.map(({ id, value }) => (\n          <tr key={id}>\n            <td>{id}</td>\n            <td>{value}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import { useState, useEffect, useMemo } from 'react';\nimport { useLocation, useNavigate, useSearchParams } from 'react-router-dom';\nimport SortSelector from '../components/SortSelector/SortSelector';\nimport Table from '../components/Table/Table';\n\nconst initialState = [\n  { id: 1, value: 100 },\n  { id: 2, value: 400 },\n  { id: 3, value: 200 },\n  { id: 4, value: 500 },\n  { id: 5, value: 300 },\n];\n\nconst sortOptions = [\n  { value: 'ascending', label: 'By ascending' },\n  { value: 'descending', label: 'By descending' },\n];\n\nexport default function TablePage() {\n  const [expenses, setExpenses] = useState(initialState);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  //---first option how to get url params\n  const params = useMemo(\n    () => Object.fromEntries([...searchParams]),\n    [searchParams]\n  );\n\n  const sortOrder = params.sortBy ?? 'ascending';\n\n  // ---second option how get url params\n  // const sortOrder = searchParams.get('sortBy') ?? 'ascending';\n\n  // ---third option how get url params\n  // const sortOrder =\n  //   new URLSearchParams(location.search).get('sortBy') ?? 'ascending';\n\n  const handleOptionChange = value => {\n    navigate({ ...location, search: `sortBy=${value}` });\n  };\n\n  useEffect(() => {\n    if (location.search !== '') return;\n    navigate({ ...location, search: 'sortBy=ascending' });\n  }, [location, navigate]);\n\n  useEffect(() => {\n    setExpenses(state =>\n      [...state].sort((a, b) => {\n        return sortOrder === 'ascending'\n          ? a.value - b.value\n          : b.value - a.value;\n      })\n    );\n  }, [sortOrder]);\n\n  return (\n    <>\n      <SortSelector\n        options={sortOptions}\n        value={sortOrder}\n        onChange={handleOptionChange}\n      />\n      <Table items={expenses} />\n    </>\n  );\n}\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["SortSelector","options","value","onChange","name","e","target","map","option","label","Table","items","id","initialState","sortOptions","TablePage","useState","expenses","setExpenses","navigate","useNavigate","location","useLocation","useSearchParams","searchParams","sortOrder","useMemo","Object","fromEntries","sortBy","useEffect","search","state","sort","a","b","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}